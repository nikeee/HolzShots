{
	// This is an example uploader definition for directupload.net - feel free to copy it and modify it for your needs!

	// Leave these here, they are needed for HolzShots to get things working
	"$schema": "https://holzshots.net/schema/uploader.json",
	"schemaVersion": "0.2.0",

	"meta": {
		// Version, name and author of this uploader
		"version": "1.0.0", // Use Semver here (like in a package.json)
		"name": "DirectUpload.net", // The name that will be used in your settings.json
		"author": "nikeee",
		"license": "MIT", // SPDX license identifier

		"website": "https://holzshots.net"

		// You can also specify URLs to fetch updates to this definition, just like with user scripts
		// Just press Ctrl+Space to get a list of available fields
	},

	// Define how your image is uploaded.
	// This is a sample for the image hoster DirectUpload.net
	// Make sure you are aligned with the ToS of the respective provider.
	"uploader": {
		// Field name of the image file
		"fileFormName": "bilddatei",

		// URL where the request is sent to
		"requestUrl": "https://directupload.net/index.php?mode=upload",

		// Other parameters needed (will be put in the body)
		"postParams": {
			"input": "file"
		},

		// If you need it, you can also specify additional headers
		/*
		"headers": {
			"User-Agent": "HolzShots/2.0"
		},
		*/

		// How to parse the response
		"responseParser": {
			// A list of regex patterns that you can use in the urlTemplate
			// Supports all features of .NET's regex engine.
			"regexPatterns": [
				"(?<url>https://[a-zA-Z0-9]*.directupload.net/images/\\d{1,}/\\b(?!temp\\b).*?\\b.[a-zA-Z]{1,3})"
			],

			// Everything between two $ will be interpreted
			// There are multiple ways for interpreting stuff.
			// First, there is regex:
			//     $regex:n$
			//         Take the match of the nth entry in regexPatterns (zero-based).
			//     $regex:n:name$
			//          Same as $regex:n$, but takes only the contents of a capturing group.
			//     $regex:n:name:m$
			//          Same as above, but takes the mth match (again, zero-based), assuming there are multiple matches.
			// Then, you can use JSONPath if your response is JSON:
			//     $json:data.link$
			//          Takes the JSON path data.link
			// Everything that is not between two $ is just taken as is.
			"urlTemplate": "$regex:0:url:2$"
		}
	}
}
